package com.example.ECM.service.Impl;

import com.example.ECM.model.Order;
import com.example.ECM.model.Payment;
import com.example.ECM.model.PaymentStatus;
import com.example.ECM.repository.OrderRepository;
import com.example.ECM.repository.PaymentRepository;
import com.example.ECM.service.PaymentService;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class PaymentServiceImpl implements PaymentService {

    private static final Logger logger = LoggerFactory.getLogger(PaymentServiceImpl.class);
    private final PaymentRepository paymentRepository;
    private final OrderRepository orderRepository;

    @Override
    public Payment createPayment(Order order) {
        // üîç Ki·ªÉm tra xem ƒë∆°n h√†ng ƒë√£ c√≥ thanh to√°n th√†nh c√¥ng ch∆∞a
        Optional<Payment> existingPayment = paymentRepository.findByOrder(order);
        if (existingPayment.isPresent() && existingPayment.get().getPaymentStatus() == PaymentStatus.SUCCESS) {
            throw new RuntimeException("ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c thanh to√°n. Kh√¥ng th·ªÉ t·∫°o thanh to√°n m·ªõi.");
        }

        Payment payment = new Payment();
        payment.setOrder(order);
        payment.setUser(order.getUser());
        payment.setAmount(order.getTotalPrice());
        payment.setTransactionId(UUID.randomUUID().toString());

        // X√°c ƒë·ªãnh tr·∫°ng th√°i thanh to√°n d·ª±a v√†o s·ªë ti·ªÅn c·ªßa ƒë∆°n h√†ng
        if (order.getTotalPrice().compareTo(BigDecimal.ZERO) > 0) {
            payment.setPaymentStatus(PaymentStatus.SUCCESS);
            logger.info("‚úÖ Payment initialized with SUCCESS status.");
        } else {
            payment.setPaymentStatus(PaymentStatus.FAILED);
            logger.warn("‚ùå Payment initialized with FAILED status due to zero or negative amount.");
        }

        payment.setPaymentDate(LocalDateTime.now());

        Payment savedPayment = paymentRepository.save(payment);
        logger.info("‚úÖ Payment created: TransactionId = {}, Amount = {}, Status = {}",
                savedPayment.getTransactionId(), savedPayment.getAmount(), savedPayment.getPaymentStatus());
        return savedPayment;
    }


    @Override
    @Transactional
    public void updatePaymentStatus(String transactionId, PaymentStatus status, String vnpTransactionStatus, String vnpTxnRef, Long vnpAmount) {
        logger.info("üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n cho TransactionId: {}", transactionId);

        Payment payment = paymentRepository.findByTransactionId(transactionId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y giao d·ªãch v·ªõi m√£: " + transactionId));

        // üî• NgƒÉn ch·∫∑n c·∫≠p nh·∫≠t n·∫øu ƒë√£ th√†nh c√¥ng tr∆∞·ªõc ƒë√≥
        if (payment.getPaymentStatus() == PaymentStatus.SUCCESS) {
            logger.warn("‚ö†Ô∏è Payment ƒë√£ ƒë∆∞·ª£c thanh to√°n tr∆∞·ªõc ƒë√≥. Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t.");
            throw new RuntimeException("Giao d·ªãch n√†y ƒë√£ ho√†n th√†nh. Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i.");
        }

        logger.info("üì© Ph·∫£n h·ªìi t·ª´ VNPay - Tr·∫°ng th√°i: {}, M√£ giao d·ªãch: {}, S·ªë ti·ªÅn: {}", vnpTransactionStatus, vnpTxnRef, vnpAmount);

        // X√°c ƒë·ªãnh tr·∫°ng th√°i m·ªõi c·ªßa thanh to√°n d·ª±a v√†o ph·∫£n h·ªìi t·ª´ VNPay
        PaymentStatus newStatus = "00".equals(vnpTransactionStatus) ? PaymentStatus.SUCCESS : PaymentStatus.FAILED;

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu c√≥ thay ƒë·ªïi
        if (payment.getPaymentStatus() != newStatus) {
            payment.setPaymentStatus(newStatus);
            logger.info("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n th√†nh c√¥ng: {}", newStatus);
        }

        // C·∫≠p nh·∫≠t th√¥ng tin giao d·ªãch t·ª´ VNPay
        payment.setVnpTransactionNo(vnpTxnRef);
        payment.setAmount(BigDecimal.valueOf(vnpAmount).divide(BigDecimal.valueOf(100))); // Chuy·ªÉn v·ªÅ VNƒê
        paymentRepository.save(payment);
        logger.info("üíæ ƒê√£ c·∫≠p nh·∫≠t Payment th√†nh c√¥ng v·ªõi TransactionId: {}", transactionId);

        // N·∫øu thanh to√°n th√†nh c√¥ng, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
        if (newStatus == PaymentStatus.SUCCESS) {
            markOrderAsPaid(payment);
        }
    }

    @Transactional
    protected void markOrderAsPaid(Payment payment) {
        Order order = payment.getOrder();
        if (order != null) {
            order.setStatus("PAID");  // C·∫≠p nh·∫≠t tr·∫°ng th√°i thay v√¨ x√≥a
            orderRepository.save(order);
            logger.info("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i PAID: OrderId = {}", order.getId());
        } else {
            logger.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
        }
    }

    @Override
    public Payment getPaymentByTransactionId(String transactionId) {
        return paymentRepository.findByTransactionId(transactionId)
                .orElseThrow(() -> new RuntimeException("Payment not found for transactionId: " + transactionId));
    }

    @Override
    @Transactional
    public void savePayment(Payment payment) {
        paymentRepository.save(payment);
        logger.info("üíæ Payment saved: TransactionId = {}, Status = {}", payment.getTransactionId(), payment.getPaymentStatus());
    }
}
